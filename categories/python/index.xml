<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on (Dev)Ops observations</title><link>http://blog.ylitalot.com/categories/python/</link><description>(Dev)Ops observations (python)</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Juha Ylitalo &amp;lt;juha@ylitalot.net&amp;gt;</copyright><lastBuildDate>Wed, 06 Dec 2017 12:00:00 +0200</lastBuildDate><atom:link href="http://blog.ylitalot.com/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Notes about Ansible</title><link>http://blog.ylitalot.com/post/ansible-notes/</link><pubDate>Wed, 06 Dec 2017 12:00:00 +0200</pubDate><guid>http://blog.ylitalot.com/post/ansible-notes/</guid><description>&lt;p>My favorite Ansible tools and personal contributions towards Ansible.&lt;/p>
&lt;h2 id="profiling-ansible" >Profiling Ansible
&lt;span>
&lt;a href="#profiling-ansible">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Create &lt;em>ansible.cfg&lt;/em> file into same directory with playbook with following content:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[default]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">callback_whitelist = profile_tasks
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Source: &lt;a href="https://github.com/jlafon/ansible-profile">ansible-profile&lt;/a>&lt;/p>
&lt;h2 id="related-tools" >Related tools
&lt;span>
&lt;a href="#related-tools">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>&lt;a href="https://github.com/willthames/ansible-lint">ansible-lint&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="related-tools-1" >Related tools
&lt;span>
&lt;a href="#related-tools-1">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;h2 id="personal-opinions-contributions-etc" >Personal opinions, contributions, etc.
&lt;span>
&lt;a href="#personal-opinions-contributions-etc">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>My personal background with configuration management tools starts from Cfengine in &amp;rsquo;90s that we used to customize Linux installations. Followed by Puppet to setup multi-node installations in &amp;rsquo;00s. In &amp;lsquo;16, I came across with Chef, but my current choice for configuration tasks is Ansible, even if it is not the fastest tool on a market.&lt;/p>
&lt;h3 id="contributions-to-other-ansible-projects" >Contributions to other Ansible projects
&lt;span>
&lt;a href="#contributions-to-other-ansible-projects">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;a href="https://github.com/sensu/sensu-ansible/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr+jylitalo">ansible-sensu&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="personal-ansible-roles-projects" >Personal Ansible Roles projects
&lt;span>
&lt;a href="#personal-ansible-roles-projects">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;a href="https://github.com/jylitalo/EmailRelay">EmailRelay&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jylitalo/GceInstance">GceInstance&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jylitalo/JekyllSetup">JekyllSetup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jylitalo/SyncToGoogleStorage">SyncToGoogleStorage&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jylitalo/TwitterBot">TwitterBot&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="personal-ansible-playbook-projects" >Personal Ansible Playbook projects
&lt;span>
&lt;a href="#personal-ansible-playbook-projects">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;a href="https://github.com/jylitalo/configs">configure Macbook&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jylitalo/blog.ylitalot.com-site">blog.ylitalot.com site&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jylitalo/ylitalot.com-site">ylitalot.com site&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jylitalo/ylitalot.net-site">ylitalot.net site&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="pull-requests-to-other-ansible-projects" >Pull requests to other Ansible projects
&lt;span>
&lt;a href="#pull-requests-to-other-ansible-projects">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;a href="https://github.com/toshihirock/node-elb-log-parser/pull/2">node-elb-log-parser&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Doctest in Python</title><link>http://blog.ylitalot.com/post/python-doctest/</link><pubDate>Mon, 14 Sep 2015 12:00:00 +0200</pubDate><guid>http://blog.ylitalot.com/post/python-doctest/</guid><description>&lt;p>My Assets on Octopress script needed couple modifications and I felt that it was good platform for doing unit tests. Python has nice test framework called &lt;a href="http://docs.python.org/3/library/doctest.html">doctest&lt;/a>, which allows you to insert unit test cases as comments in your python code. My current tests are done for methods that don&amp;rsquo;t recover mockups (for things like file system access) and simply return strings, lists and such to caller.&lt;/p>
&lt;p>In following example, I have method called &lt;code>_extract_from_markdown&lt;/code>, which gets one line of text from markdown file as string. It will try to find all possible references to files under /assets/ or /images/ and return those as list of strings. Comment lines that starts with &amp;lsquo;&amp;raquo;&amp;gt;&amp;rsquo; are method calls and lines below them (starting with [) are expected return values from method.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">def _extract_from_markdown(line):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;gt;&amp;gt;&amp;gt; AssetsFinder._extract_from_markdown(&amp;#34;foobar&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> []
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;gt;&amp;gt;&amp;gt; AssetsFinder._extract_from_markdown(&amp;#39;[foobar](/images/link.jpg)&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#39;/images/link.jpg&amp;#39;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;gt;&amp;gt;&amp;gt; AssetsFinder._extract_from_markdown(&amp;#39;[foobar](/images/link.jpg &amp;#34;foobar&amp;#34;)&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#39;/images/link.jpg&amp;#39;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;gt;&amp;gt;&amp;gt; AssetsFinder._extract_from_markdown(&amp;#39;{\% img /images/something.jpg &amp;#34;foobar&amp;#34;}&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#39;/images/something.jpg&amp;#39;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;gt;&amp;gt;&amp;gt; AssetsFinder._extract_from_markdown(&amp;#39;[![#48/2012: Rautatientori](/images/2012/11/IMG_0156_t.jpg &amp;#34;#48/2012: Rautatientori&amp;#34;)](/images/2012/11/IMG_0156_l.jpg &amp;#34;#48/2012: Rautatientori&amp;#34;)&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#39;/images/2012/11/IMG_0156_t.jpg&amp;#39;, &amp;#39;/images/2012/11/IMG_0156_l.jpg&amp;#39;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> links = []
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for key in [&amp;#34;images&amp;#34;,&amp;#34;assets&amp;#34;]:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for field in line.split(&amp;#34;(/&amp;#34; + key)[1:]:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> field = &amp;#34;/%s%s&amp;#34; % (key,field[:field.find(&amp;#39;)&amp;#39;)])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if &amp;#39; &amp;#34;&amp;#39; in field: field = field[:field.find(&amp;#39; &amp;#34;&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> links.append(field)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for c in [&amp;#39; &amp;#39;,&amp;#39;&amp;#34;&amp;#39;,&amp;#34;&amp;#39;&amp;#34;]:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for field in line.split(&amp;#34;%s/%s&amp;#34; % (c,key))[1:]:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> field = &amp;#34;/&amp;#34; + key + field[:field.find(c,1)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> links.append(field)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return links
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>As slight more advanced tests, find_source_dir method will throw AssertionException, if it is unable to guess root directory in your Octoress directory tree. First two tests are successful cases, while the third one (about /bound/to/fail directory) will throw exception.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">def find_source_dir(dir=os.getcwd()):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;gt;&amp;gt;&amp;gt; Octopress.find_source_dir(&amp;#34;/tmp/octo/source/_posts&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/tmp/octo/source&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;gt;&amp;gt;&amp;gt; Octopress.find_source_dir(&amp;#34;/tmp/octo/source&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;/tmp/octo/source&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;gt;&amp;gt;&amp;gt; Octopress.find_source_dir(&amp;#34;/bound/to/fail&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Traceback (most recent call last):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> AssertionError: unable to determine source directory from /bound/to/fail
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if dir.endswith(&amp;#34;/source&amp;#34;): return dir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if dir.endswith(&amp;#34;/source/_posts&amp;#34;): return dir[:dir.rfind(&amp;#39;/&amp;#39;)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if os.access(dir + &amp;#34;/config.rg&amp;#34;, os.R_OK) and os.access(dir + &amp;#34;/source&amp;#34;,os.F_OK):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return dir + &amp;#34;/source&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> raise AssertionError(&amp;#34;unable to determine source directory from &amp;#34; + dir)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now that we have written tests into our python script, we should execute them and check results. Short and sweet version is to run &lt;code>python -m doctest assets_on_octopress.py&lt;/code>, but it will only report failed tests cases. To get little more complete report out of it, we have to call &lt;code>python -m doctest -v assets_on_octopress.py&lt;/code>.&lt;/p>
&lt;p>Verbose version will first go through all test cases in following manner:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Trying:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> AssetsFinder._extract_from_markdown(&amp;#34;foobar&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Expecting:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> []
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Trying:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> AssetsFinder._extract_from_markdown(&amp;#39;[foobar](/images/link.jpg)&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Expecting:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#39;/images/link.jpg&amp;#39;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Trying:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> AssetsFinder._extract_from_markdown(&amp;#39;[foobar](/images/link.jpg &amp;#34;foobar&amp;#34;)&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Expecting:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#39;/images/link.jpg&amp;#39;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And based on that, it will create nice summary about what was tested and what areas still need more work.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">20 items had no tests:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFinder
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFinder.__init__
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFinder._find_markdown_files
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFinder._scan_tree
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFinder._validate_found
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFinder._validate_missing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFinder._validate_waste
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFinder.dir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFinder.scan
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFinder.validate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFixer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFixer.__init__
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFixer._original_image
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFixer._resize_image
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFixer._validate_found
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFixer._validate_missing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.AssetsFixer._validate_waste
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.Octopress
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assets_on_octopress.Octopress.head
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4 items passed all tests:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 5 tests in assets_on_octopress.AssetsFinder._extract_from_markdown
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 5 tests in assets_on_octopress.AssetsFinder._ignore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 6 tests in assets_on_octopress.AssetsFinder.get_url
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 3 tests in assets_on_octopress.Octopress.find_source_dir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">19 tests in 24 items.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">19 passed and 0 failed.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Test passed.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>