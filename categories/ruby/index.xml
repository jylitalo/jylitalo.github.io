<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ruby on (Dev)Ops observations</title><link>http://blog.ylitalot.com/categories/ruby/</link><description>(Dev)Ops observations (ruby)</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Juha Ylitalo &amp;lt;juha@ylitalot.net&amp;gt;</copyright><lastBuildDate>Mon, 14 Sep 2015 12:00:00 +0200</lastBuildDate><atom:link href="http://blog.ylitalot.com/categories/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>Chef without Chef server</title><link>http://blog.ylitalot.com/post/chef-without-server/</link><pubDate>Mon, 14 Sep 2015 12:00:00 +0200</pubDate><guid>http://blog.ylitalot.com/post/chef-without-server/</guid><description>&lt;p>There are couple alternatives available if you wish to use Chef in your infrastructure, but don&amp;rsquo;t have budget to setup hosted Chef service. So far I&amp;rsquo;ve seen one based on Git and another based on AWS S3.&lt;/p>
&lt;h2 id="git-based-solution" >Git based solution
&lt;span>
&lt;a href="#git-based-solution">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>In git based solution, create repository into bitbucket.com and create directory tree:&lt;/p>
&lt;ul>
&lt;li>/chef/cookbooks/my_cookbook/definitions/default.rb&lt;/li>
&lt;li>/chef/cookbooks/my_cookbook/files&lt;/li>
&lt;li>/chef/cookbooks/my_cookbook/recipes/default.rb&lt;/li>
&lt;/ul>
&lt;p>In your &lt;em>/chef/cookbooks/my_cookbook/recipes/default.rb&lt;/em>, put following text among other stuff:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">directory &amp;#39;/root/bin&amp;#39; do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> owner &amp;#39;root&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> group &amp;#39;root&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mode &amp;#39;0700&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> action :create
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cookbook_file &amp;#39;/root/bin/run_chef&amp;#39; do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> source &amp;#39;run_chef&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> owner &amp;#39;root&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> group &amp;#39;root&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mode &amp;#39;0700&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> action :create
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cron &amp;#39;run chef hourly&amp;#39; do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> minute &amp;#39;13&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> user &amp;#39;root&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> home &amp;#39;/root&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> command &amp;#39;/root/bin/run_chef&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> action :create
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Create &lt;em>/chef/cookbooks/my_cookbook/files/run_chef&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nb">cd&lt;/span> /root/my_repository/chef
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git pull
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> ! -f /etc/chef/client.rb &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mkdir -p /etc/chef
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cat &amp;gt; /etc/chef/client.rb &lt;span class="p">&amp;amp;&lt;/span>lt&lt;span class="p">;&amp;amp;&lt;/span>lt&lt;span class="p">;&lt;/span>EOF
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">log_level :info
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">log_location STDOUT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">EOF
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chef-client -z -c /etc/chef/client.rb -o my_cookbook
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now you are ready to commit and push your git repository into bitbucket.&lt;/p>
&lt;p>In client hosts, create ssh keys (without passphrase). Add your public ssh key as deployment key into your new repository. &lt;code>git clone&lt;/code> your repository under /root. &lt;code>cd my_repository&lt;/code> and &lt;code>chef-client -z -o my_cookbook&lt;/code>&lt;/p>
&lt;h2 id="s3-based-solution" >S3 based solution
&lt;span>
&lt;a href="#s3-based-solution">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Our S3 based solution starts in same fashion with Git based solution. First we create git repository, create directory tree into it and configure cron to run /root/bin/run_chef on hourly basis. Things split into new course in &lt;em>/chef/cookbooks/my_cookbook/files/run_chef&lt;/em>. With S3, file content should be:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /root/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm -rf cookbooks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">aws s3 --no-sign-request cp s3://my_s3_bucket/my_cookbooks.tar.gz .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar xzvf cookbooks.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> ! -f /etc/chef/client.rb &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mkdir -p /etc/chef
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cat &amp;gt; /etc/chef/client.rb &lt;span class="p">&amp;amp;&lt;/span>lt&lt;span class="p">;&amp;amp;&lt;/span>lt&lt;span class="p">;&lt;/span>EOF
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">log_level :info
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">log_location STDOUT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">EOF
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chef-client -z -c /etc/chef/client.rb -o my_cookbook
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>NOTE:&lt;/em> awscli 1.2.9 doesn&amp;rsquo;t support &lt;code>--no-sign-request&lt;/code> command line option, so you need something more recent than that. If you install it with &lt;code>pip install awscli&lt;/code> in Ubuntu, it will get installed under &lt;em>/usr/local/bin&lt;/em>.&lt;/p>
&lt;p>In your &lt;em>/chef/cookbooks/my_cookbook&lt;/em> directory, issue &lt;code>berks install&lt;/code> and &lt;code>berks package&lt;/code>. This should create &lt;em>cookbooks-*.tar.gz&lt;/em>. Rename it into &lt;em>cookbook.tar.gz&lt;/em>.&lt;/p>
&lt;p>You also need S3 bucket my_s3_bucket with following kind of S3 bucket policy.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Statement&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Sid&amp;#34;: &amp;#34;AddCannedAcl&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Principal&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;AWS&amp;#34;: &amp;#34;arn:aws:iam::MY_AWS_ACCOUNT_NUMBER:root&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Action&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;s3:GetObjectAcl&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;s3:GetObject&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Resource&amp;#34;: &amp;#34;arn:aws:s3:::my_s3_bucket/*&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now you are ready to upload your &lt;em>cookbook.tar.gz&lt;/em> into my_s3_bucket. Remember to set &lt;em>cookbook.tar.gz&lt;/em> public, so that our EC2 instances can access it. Now you just have to copy &lt;em>/chef/cookbooks/my_cookbook/files/run_chef&lt;/em> to your instance (for example as part of userdata) and execute it once.&lt;/p>
&lt;h2 id="comparison" >Comparison
&lt;span>
&lt;a href="#comparison">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>In Git based solution, prerequirements are git and chef-client. You have complete audit trail, because all content is pushed through the git repository, but you have to maintain deployment keys (or put one valid deployment keypair into chef configuration, if you want to do autoscaling).&lt;/p>
&lt;p>In S3 based solution, prerequirements are awscli (that supposed &amp;ndash;no-sign-request) and chef-client. You don&amp;rsquo;t have to worry about deployment keys and you can use Berksfile to maintain all your 3rd party cookbooks, but you have to create new cookbook.tar.gz whenever you make changes to your chef configuration and there is no direct linking between your cookbook.tar.gz files and content in git repository.&lt;/p>
&lt;p>Both scenarios work very well, if the goal is to ensure that all your nodes have necessary user accounts, properly configured sudoers and monitoring tools like nagios plugins or zabbix-agent.&lt;/p></description></item><item><title>Notes about Chef</title><link>http://blog.ylitalot.com/post/chef-notes/</link><pubDate>Mon, 14 Sep 2015 12:00:00 +0200</pubDate><guid>http://blog.ylitalot.com/post/chef-notes/</guid><description>&lt;p>Random notes about chef configuration management tool and related topics.&lt;/p>
&lt;p>Problem with &lt;code>knife bootstrap&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[root@localhost chef-repo]# knife bootstrap --run-list &amp;#34;role[phpapp]&amp;#34; --json-attributes &amp;#34;{\&amp;#34;phpapp\&amp;#34;: {\&amp;#34;server_name\&amp;#34;: \&amp;#34;localhost.localdomain\&amp;#34;}}&amp;#34; --ssh-user root --ssh-password PASSWORD HOSTNAME&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Node&amp;amp;nbsp;&amp;amp;nbsp;exists, overwrite it? (Y/N) y&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;span style=&amp;#34;color: red&amp;#34;&amp;gt;ERROR:&amp;lt;/span&amp;gt; Method Not Allowed&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Response: &amp;amp;lt;html&amp;amp;gt;&amp;amp;lt;head&amp;gt;&amp;amp;lt;title&amp;amp;gt;405 Method Not Allowed&amp;amp;lt;/title&amp;amp;gt;&amp;amp;lt;/head&amp;amp;gt;&amp;amp;lt;body&amp;amp;gt;&amp;amp;lt;h1&amp;amp;gt;Method Not Allowed&amp;amp;lt;/h1&amp;amp;gt;Method Not Allowed&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;hr&amp;amp;gt;&amp;amp;lt;address&amp;amp;gt;mochiweb+webmachine web server&amp;amp;lt;/address&amp;amp;gt;&amp;amp;lt;/body&amp;amp;gt;&amp;amp;lt;/html&amp;amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[root@localhost chef-repo]#
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Solution:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[root@localhost chef-repo]# knife bootstrap &amp;lt;b&amp;gt;--node-name NODENAME&amp;lt;/b&amp;gt; --run-list &amp;#34;role[phpapp]&amp;#34; --json-attributes &amp;#34;{\&amp;#34;phpapp\&amp;#34;: {\&amp;#34;server_name\&amp;#34;: \&amp;#34;localhost.localdomain\&amp;#34;}}&amp;#34; --ssh-user root --ssh-password PASSWORD HOSTNAME&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10.25.4.134 Chef Client finished, X/Y resources updated in x.xx seconds&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[root@localhost chef-repo]#
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[root@localhost chef-repo]# knife ec2 server list&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;span style=&amp;#34;color: red&amp;#34;&amp;gt;ERROR:&amp;lt;/span&amp;gt; Fog::Compute::AWS::Error: RequestExpired =&amp;gt; Request has expired. Timestamp date is 2015-04-13T09:54:47Z&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[root@localhost chef-repo]#&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Solution:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[root@localhost chef-repo]# /etc/init.d/ntpd restart&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Starting ntpd: [ &amp;lt;span style=&amp;#34;color:green&amp;#34;&amp;gt;OK&amp;lt;/span&amp;gt; ]&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[root@localhost chef-repo]# ntpq -p&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> remote refid st t when poll reach delay offset jitter&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">================================================================&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[root@localhost chef-repo]# knife ec2 server list&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Instance ID Name Public IP Private IP Flavor Image SSH Key Security Groups IAM Profile State&amp;lt;br/&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[root@localhost chef-repo]#
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Notes about Puppet</title><link>http://blog.ylitalot.com/post/puppet-notes/</link><pubDate>Mon, 14 Sep 2015 12:00:00 +0200</pubDate><guid>http://blog.ylitalot.com/post/puppet-notes/</guid><description>&lt;p>Random notes about puppet configuration management tool and related topics.&lt;/p>
&lt;h2 id="puppet-doesnt-like-symlinks" >Puppet doesn&amp;rsquo;t like symlinks
&lt;span>
&lt;a href="#puppet-doesnt-like-symlinks">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>When you start building &lt;em>/etc/puppet/environments/production&lt;/em> in your puppet master, don&amp;rsquo;t use symlinks on directory tree. I once made the mistake of using symlinks for manifests and modules directories and was getting frustrated, when puppet agent didn&amp;rsquo;t seem to get my &lt;em>manifests/site.pp&lt;/em> file.&lt;/p>
&lt;p>Once I copied all the directly into &lt;em>/etc/puppet/environments/production&lt;/em> tree, things started to work.&lt;/p>
&lt;h2 id="use-info-notice-or-debug-in-sitepp-to-describe-what-role-each-client-host-has" >Use &lt;code>info()&lt;/code>, &lt;code>notice()&lt;/code> or &lt;code>debug()&lt;/code> in site.pp to describe what role each client host has
&lt;span>
&lt;a href="#use-info-notice-or-debug-in-sitepp-to-describe-what-role-each-client-host-has">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Many users would like to see, which role was applied to which host.
My approach for this challenge has been to put &lt;code>notice()&lt;/code>, &lt;code>info()&lt;/code> or &lt;code>debug()&lt;/code> in &lt;em>node&lt;/em> definitions to log this information into puppet masters log files (probably in &lt;em>/var/log/messages&lt;/em> or &lt;em>/var/log/syslog&lt;/em>).&lt;/p>
&lt;h2 id="puppet-cert-commands-takes-awfully-long-time" >puppet cert commands takes awfully long time
&lt;span>
&lt;a href="#puppet-cert-commands-takes-awfully-long-time">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>&lt;code>puppet cert&lt;/code> commands do hostname resolving along the way and if your DNS configuration is incorrect, it will eventually fail. This problem might appear, if you have invalid information in &lt;em>/etc/resolv.conf&lt;/em>.&lt;/p>
&lt;h2 id="potential-pitfalls-on-legacy-configs" >Potential pitfalls on legacy configs
&lt;span>
&lt;a href="#potential-pitfalls-on-legacy-configs">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>If you are given task to transform existing puppet configuration for a new hosting provider, check this things for potential problem:&lt;/p>
&lt;ul>
&lt;li>does it overwrite &lt;em>/etc/resolv.conf&lt;/em>?
This will mess your DNS configuration and cause all kind of issues.&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>does it overwrite &lt;em>/etc/puppet/puppet.conf&lt;/em>?
Puppet works beatifully on a first run, but ruins all future runs.&lt;/li>
&lt;/ul></description></item></channel></rss>